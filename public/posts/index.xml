<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on codeskraps</title>
    <link>https://codeskraps.com/posts/</link>
    <description>Recent content in Posts on codeskraps</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>me@codeskraps.com (codeskraps)</managingEditor>
    <webMaster>me@codeskraps.com (codeskraps)</webMaster>
    <lastBuildDate>Wed, 02 Oct 2024 16:55:53 +0200</lastBuildDate>
    <atom:link href="https://codeskraps.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring SSH Keys for Individual Git Commands</title>
      <link>https://codeskraps.com/posts/git_ssh_command/</link>
      <pubDate>Wed, 02 Oct 2024 16:55:53 +0200</pubDate><author>me@codeskraps.com (codeskraps)</author>
      <guid>https://codeskraps.com/posts/git_ssh_command/</guid>
      <description>&lt;p&gt;When working with Git repositories, you often need to authenticate using SSH keys. While you can configure SSH settings globally, there are times when you need to use a specific SSH key for just one command. This is particularly useful when cloning a new repository or adding a submodule, where there isn&amp;rsquo;t yet a local &lt;code&gt;.git/config&lt;/code&gt; file to modify.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you&amp;rsquo;re working on a project that requires you to clone a repository using a specific SSH key. Normally, you might edit your SSH config file or the repository&amp;rsquo;s &lt;code&gt;.git/config&lt;/code&gt; file. But what if you&amp;rsquo;re just getting started and don&amp;rsquo;t have these files set up yet?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simplifying MVI Architecture</title>
      <link>https://codeskraps.com/posts/mvi_architecture/</link>
      <pubDate>Fri, 27 Sep 2024 13:45:09 +0200</pubDate><author>me@codeskraps.com (codeskraps)</author>
      <guid>https://codeskraps.com/posts/mvi_architecture/</guid>
      <description>&lt;p&gt;Model-View-Intent (MVI) is a powerful architectural pattern for building user interfaces, especially in Android development. In this post, we&amp;rsquo;ll explore a helper class that simplifies the implementation of MVI, making it easier to manage state, handle user intents, and emit actions in your application.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
